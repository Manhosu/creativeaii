"""
Review Manager
Sistema de revis√£o humana de artigos antes da publica√ß√£o
"""

import os
import sqlite3
import json
from typing import Dict, List, Optional, Any, Tuple
from datetime import datetime
from loguru import logger
from ..scraper.availability_checker import AvailabilityChecker
from ..intelligence.priority_manager import PriorityManager
from pathlib import Path
import threading

class ReviewManager:
    """Gerenciador de revis√£o de artigos"""
    
    def __init__(self, db_path: str = "data/review_articles.db"):
        """Inicializa o gerenciador de revis√£o"""
        self.db_path = db_path
        self.lock = threading.Lock()
        self.availability_checker = AvailabilityChecker()
        self.priority_manager = PriorityManager()
        
        # Garantir que o diret√≥rio existe
        Path(self.db_path).parent.mkdir(parents=True, exist_ok=True)
        
        # Verificar e corrigir banco de dados
        self._verify_and_fix_database()
        
        # Inicializar banco
        self._init_database()
        
        # Executar migra√ß√µes
        self._run_migrations()
        
        # Configurar logging
        logger.add(
            "logs/review.log",
            rotation="1 week",
            retention="30 days",
            level="INFO",
            format="{time} | {level} | {message}"
        )
        
        logger.info(f"‚úÖ ReviewManager inicializado - DB: {self.db_path}")
    
    def _verify_and_fix_database(self):
        """Verifica se o banco est√° v√°lido e corrige se necess√°rio"""
        try:
            if Path(self.db_path).exists():
                # Tentar conectar e fazer uma query simples
                with sqlite3.connect(self.db_path) as conn:
                    cursor = conn.cursor()
                    cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
                    tables = cursor.fetchall()
                    
                    # Se n√£o tem a tabela articles, recriar
                    if not any('articles' in str(table) for table in tables):
                        logger.warning("‚ö†Ô∏è Tabela 'articles' n√£o encontrada, recriando banco...")
                        self._recreate_database()
                    else:
                        logger.info("‚úÖ Banco de dados verificado e v√°lido")
                        
        except sqlite3.DatabaseError as e:
            logger.error(f"‚ùå Banco corrompido: {e}")
            logger.info("üîß Recriando banco de dados...")
            self._recreate_database()
        except Exception as e:
            logger.error(f"‚ùå Erro ao verificar banco: {e}")
            self._recreate_database()
    
    def _recreate_database(self):
        """Recria o banco de dados do zero"""
        try:
            # Backup do arquivo atual se existir
            if Path(self.db_path).exists():
                backup_path = f"{self.db_path}.backup.{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                Path(self.db_path).rename(backup_path)
                logger.info(f"üì¶ Backup criado: {backup_path}")
            
            # Remover arquivo corrompido
            if Path(self.db_path).exists():
                Path(self.db_path).unlink()
                
            logger.info("üîß Recriando banco de dados...")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao recriar banco: {e}")
    
    def _init_database(self):
        """Inicializa o banco de dados"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # Criar tabela principal
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS articles (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        titulo TEXT NOT NULL,
                        slug TEXT,
                        meta_descricao TEXT,
                        conteudo TEXT NOT NULL,
                        tags TEXT DEFAULT '[]',
                        produto_id TEXT,
                        produto_nome TEXT,
                        status TEXT DEFAULT 'pendente',
                        data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        data_revisao TIMESTAMP,
                        comentario_revisor TEXT,
                        revisor_nome TEXT,
                        score_seo INTEGER DEFAULT 0,
                        tipo_produto TEXT,
                        tom_usado TEXT DEFAULT 'profissional',
                        generation_data TEXT,
                        content_hash TEXT,
                        wp_category TEXT,
                        produto_original TEXT
                    )
                """)
                
                # Criar √≠ndices
                cursor.execute("CREATE INDEX IF NOT EXISTS idx_status ON articles(status)")
                cursor.execute("CREATE INDEX IF NOT EXISTS idx_data_criacao ON articles(data_criacao)")
                cursor.execute("CREATE INDEX IF NOT EXISTS idx_produto_id ON articles(produto_id)")
                
                conn.commit()
                
                # Verificar se h√° dados
                cursor.execute("SELECT COUNT(*) FROM articles")
                count = cursor.fetchone()[0]
                
                if count == 0:
                    logger.info("üìù Banco vazio, pronto para novos artigos")
                    # self._create_sample_articles()  # Desabilitado para sistema zerado
                else:
                    logger.info(f"üìä Banco inicializado com {count} artigos")
                    
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar banco: {e}")
            raise
    
    def _run_migrations(self):
        """Executa migra√ß√µes do banco de dados"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # Verificar se existem as novas colunas
                cursor.execute("PRAGMA table_info(articles)")
                columns = [column[1] for column in cursor.fetchall()]
                
                # Adicionar coluna wp_category se n√£o existir
                if 'wp_category' not in columns:
                    cursor.execute("ALTER TABLE articles ADD COLUMN wp_category TEXT")
                    logger.info("‚úÖ Coluna 'wp_category' adicionada")
                
                # Adicionar coluna produto_original se n√£o existir
                if 'produto_original' not in columns:
                    cursor.execute("ALTER TABLE articles ADD COLUMN produto_original TEXT")
                    logger.info("‚úÖ Coluna 'produto_original' adicionada")
                
                conn.commit()
                logger.info("üîÑ Migra√ß√µes de banco executadas com sucesso")
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao executar migra√ß√µes: {e}")
    
    def _create_sample_articles(self):
        """Cria artigos de exemplo para teste"""
        try:
            sample_articles = [
                {
                    'titulo': 'Impressora HP LaserJet Pro M404n: Review Completo 2025',
                    'slug': 'impressora-hp-laserjet-pro-m404n-review',
                    'meta_descricao': 'An√°lise completa da HP LaserJet Pro M404n. Especifica√ß√µes, pr√≥s e contras, e vale a pena comprar em 2025.',
                    'conteudo': '''# Impressora HP LaserJet Pro M404n: Review Completo

## Introdu√ß√£o
A HP LaserJet Pro M404n √© uma impressora laser monocrom√°tica projetada para pequenos escrit√≥rios e uso dom√©stico profissional.

## Especifica√ß√µes T√©cnicas
- **Velocidade**: At√© 38 ppm
- **Resolu√ß√£o**: 1200 x 1200 dpi
- **Conectividade**: USB, Ethernet
- **Capacidade**: 250 folhas

## Pr√≥s e Contras
**Pr√≥s:**
- Alta velocidade de impress√£o
- Qualidade de texto excelente
- Conectividade de rede

**Contras:**
- Apenas monocrom√°tica
- Sem WiFi integrado

## Conclus√£o
Excelente op√ß√£o para quem precisa de impress√µes r√°pidas e de qualidade em preto e branco.''',
                    'tags': '["impressora", "hp", "laser", "escrit√≥rio"]',
                    'produto_nome': 'Impressora HP LaserJet Pro M404n',
                    'status': 'pendente',
                    'tipo_produto': 'impressora',
                    'tom_usado': 'profissional'
                },
                {
                    'titulo': 'Mouse Gamer Logitech G502 HERO: Vale a Pena?',
                    'slug': 'mouse-gamer-logitech-g502-hero-review',
                    'meta_descricao': 'Review do mouse gamer Logitech G502 HERO. Especifica√ß√µes, performance em jogos e custo-benef√≠cio.',
                    'conteudo': '''# Mouse Gamer Logitech G502 HERO: An√°lise Detalhada

## Caracter√≠sticas Principais
O Logitech G502 HERO √© um mouse gamer com sensor HERO 25K de alta precis√£o.

## Performance
- **DPI**: At√© 25.600
- **Acelera√ß√£o**: 40G
- **Velocidade**: 400 IPS

## Design e Ergonomia
Mouse com design ergon√¥mico, ideal para destros, com 11 bot√µes program√°veis.

## Conclus√£o
Uma das melhores op√ß√µes para gamers que buscam precis√£o e customiza√ß√£o.''',
                    'tags': '["mouse", "gamer", "logitech", "perif√©rico"]',
                    'produto_nome': 'Mouse Gamer Logitech G502 HERO',
                    'status': 'pendente',
                    'tipo_produto': 'perif√©rico',
                    'tom_usado': 'profissional'
                }
            ]
            
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                for article in sample_articles:
                    cursor.execute("""
                        INSERT INTO articles (
                            titulo, slug, meta_descricao, conteudo, tags,
                            produto_nome, status, tipo_produto, tom_usado
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                    """, (
                        article['titulo'], article['slug'], article['meta_descricao'],
                        article['conteudo'], article['tags'], article['produto_nome'],
                        article['status'], article['tipo_produto'], article['tom_usado']
                    ))
                
                conn.commit()
                logger.info(f"‚úÖ {len(sample_articles)} artigos de exemplo criados")
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao criar artigos de exemplo: {e}")
    
    def save_article_for_review(self, article_data: Dict[str, Any], allow_duplicates: bool = True) -> int:
        """
        Salva artigo gerado para revis√£o - PERMITE M√öLTIPLOS ARTIGOS DO MESMO PRODUTO
        
        Args:
            article_data: Dados do artigo gerado pelo Generator
            allow_duplicates: Se True, permite salvar mesmo se for duplicata (padr√£o: True)
            
        Returns:
            ID do artigo no sistema de revis√£o
        """
        try:
            # üîÑ SISTEMA INTELIGENTE: Permitir m√∫ltiplos artigos por padr√£o
            produto_nome = article_data.get('produto_nome', '')
            
            # Verifica√ß√£o apenas se explicitamente n√£o permitir duplicatas
            if not allow_duplicates:
                # Verificar duplicatas apenas por hash de conte√∫do id√™ntico
                if self._is_exact_duplicate(article_data):
                    logger.warning(f"üö´ Conte√∫do id√™ntico detectado: {article_data.get('titulo', 'Sem t√≠tulo')}")
                    
                    existing_id = self._get_existing_article_id(article_data)
                    if existing_id:
                        logger.info(f"üí° Sugest√£o: Atualize o artigo existente ID {existing_id} ou use allow_duplicates=True")
                    
                    raise ValueError("Conte√∫do id√™ntico detectado - use allow_duplicates=True para for√ßar")
                
                logger.info(f"‚úÖ Novo artigo para produto existente: {produto_nome}")
            
            # Log informativo sobre produtos com m√∫ltiplos artigos
            if self._count_articles_for_product(produto_nome) > 0:
                count = self._count_articles_for_product(produto_nome) + 1
                logger.info(f"üìö Este ser√° o {count}¬∫ artigo para o produto: {produto_nome}")
            
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # Preparar dados
                tags_json = json.dumps(article_data.get('tags', []))
                generation_json = json.dumps(article_data)
                
                # Calcular hash para verifica√ß√£o de duplicatas
                content_hash = self._calculate_content_hash(article_data)
                
                cursor.execute("""
                    INSERT INTO articles (
                        titulo, slug, meta_descricao, conteudo, tags,
                        produto_id, produto_nome, tipo_produto, tom_usado, status,
                        score_seo, generation_data, content_hash, wp_category, produto_original
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    article_data.get('titulo', ''),
                    article_data.get('slug', ''),
                    article_data.get('meta_descricao', ''),
                    article_data.get('conteudo', ''),
                    tags_json,
                    article_data.get('produto_id'),
                    article_data.get('produto_nome'),
                    article_data.get('tipo_produto'),
                    article_data.get('tom_usado'),
                    article_data.get('status', 'pendente'),
                    article_data.get('seo_score', 0),
                    generation_json,
                    content_hash,
                    article_data.get('wp_category'),
                    article_data.get('produto_original')
                ))
                
                article_id = cursor.lastrowid
                conn.commit()
                
                logger.info(f"‚úÖ Artigo salvo para revis√£o: ID {article_id} - {article_data.get('titulo', 'Sem t√≠tulo')}")
                return article_id
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar artigo para revis√£o: {e}")
            raise
    
    def _is_duplicate_article(self, article_data: Dict[str, Any]) -> bool:
        """
        Verifica se artigo √© duplicata antes de salvar
        
        Args:
            article_data: Dados do artigo
            
        Returns:
            True se √© duplicata
        """
        try:
            content_hash = self._calculate_content_hash(article_data)
            
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # Verificar por hash
                cursor.execute("SELECT id FROM articles WHERE content_hash = ?", (content_hash,))
                if cursor.fetchone():
                    return True
                
                # Verificar por t√≠tulo similar (caso hash falhe)
                titulo = article_data.get('titulo', '')
                if titulo:
                    cursor.execute("SELECT id FROM articles WHERE titulo = ?", (titulo,))
                    if cursor.fetchone():
                        return True
                
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erro na verifica√ß√£o de duplicata: {e}")
            return False
    
    def _calculate_content_hash(self, article_data: Dict[str, Any]) -> str:
        """
        Calcula hash √∫nico do conte√∫do do artigo
        
        Args:
            article_data: Dados do artigo
            
        Returns:
            Hash MD5 do conte√∫do
        """
        import hashlib
        
        # Combinar t√≠tulo + in√≠cio do conte√∫do para hash √∫nico
        titulo = article_data.get('titulo', '')
        conteudo = article_data.get('conteudo', '')
        
        content_for_hash = f"{titulo}{conteudo[:200] if conteudo else ''}"
        return hashlib.md5(content_for_hash.encode('utf-8')).hexdigest()
    
    def _is_exact_duplicate(self, article_data: Dict[str, Any]) -> bool:
        """
        Verifica se artigo √© duplicata EXATA (mesmo conte√∫do) antes de salvar
        
        Args:
            article_data: Dados do artigo
            
        Returns:
            True se √© duplicata exata
        """
        try:
            content_hash = self._calculate_content_hash(article_data)
            
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # Verificar apenas por hash de conte√∫do (conte√∫do id√™ntico)
                cursor.execute("SELECT id FROM articles WHERE content_hash = ?", (content_hash,))
                return cursor.fetchone() is not None
                
        except Exception as e:
            logger.error(f"‚ùå Erro na verifica√ß√£o de duplicata exata: {e}")
            return False
    
    def _count_articles_for_product(self, produto_nome: str) -> int:
        """
        Conta quantos artigos existem para um produto espec√≠fico
        
        Args:
            produto_nome: Nome do produto
            
        Returns:
            N√∫mero de artigos existentes
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute("SELECT COUNT(*) FROM articles WHERE produto_nome = ?", (produto_nome,))
                count = cursor.fetchone()[0]
                return count
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao contar artigos do produto: {e}")
            return 0

    def _get_existing_article_id(self, article_data: Dict[str, Any]) -> Optional[int]:
        """
        Busca ID de artigo existente baseado no hash de conte√∫do
        
        Args:
            article_data: Dados do artigo
            
        Returns:
            ID do artigo existente ou None
        """
        try:
            content_hash = self._calculate_content_hash(article_data)
            
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # Buscar por hash de conte√∫do (duplicata exata)
                cursor.execute("SELECT id FROM articles WHERE content_hash = ?", (content_hash,))
                result = cursor.fetchone()
                if result:
                    return result[0]
                
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao buscar artigo existente: {e}")
            return None
    
    def list_articles(self, status: str = None, limit: int = 50, offset: int = 0) -> List[Dict[str, Any]]:
        """
        Lista artigos para revis√£o
        
        Args:
            status: Filtrar por status (pendente, aprovado, rejeitado)
            limit: N√∫mero m√°ximo de artigos
            offset: Offset para pagina√ß√£o
            
        Returns:
            Lista de artigos
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.cursor()
                
                query = """
                    SELECT id, titulo, slug, meta_descricao, conteudo, tags, produto_nome,
                           status, data_criacao, data_revisao, comentario_revisor,
                           score_seo, tipo_produto, tom_usado
                    FROM articles
                """
                params = []
                
                if status:
                    query += " WHERE status = ?"
                    params.append(status)
                
                query += " ORDER BY data_criacao DESC LIMIT ? OFFSET ?"
                params.extend([limit, offset])
                
                cursor.execute(query, params)
                rows = cursor.fetchall()
                
                articles = []
                for row in rows:
                    article = dict(row)
                    # Handle tags field safely
                    if article['tags']:
                        try:
                            # Try to parse as JSON first
                            article['tags'] = json.loads(article['tags'])
                        except (json.JSONDecodeError, TypeError):
                            # If not JSON, treat as comma-separated string
                            if isinstance(article['tags'], str):
                                article['tags'] = [tag.strip() for tag in article['tags'].split(',') if tag.strip()]
                            else:
                                article['tags'] = []
                    else:
                        article['tags'] = []
                    articles.append(article)
                
                logger.debug(f"üìã Listados {len(articles)} artigos (status: {status})")
                return articles
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao listar artigos: {e}")
            return []
    
    def get_article(self, article_id: int) -> Optional[Dict[str, Any]]:
        """
        Retorna artigo completo por ID
        
        Args:
            article_id: ID do artigo
            
        Returns:
            Dados completos do artigo ou None se n√£o encontrado
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.cursor()
                
                cursor.execute("SELECT * FROM articles WHERE id = ?", (article_id,))
                row = cursor.fetchone()
                
                if not row:
                    logger.warning(f"‚ö†Ô∏è Artigo n√£o encontrado: ID {article_id}")
                    return None
                
                article = dict(row)
                # Handle tags field safely
                if article['tags']:
                    try:
                        # Try to parse as JSON first
                        article['tags'] = json.loads(article['tags'])
                    except (json.JSONDecodeError, TypeError):
                        # If not JSON, treat as comma-separated string
                        if isinstance(article['tags'], str):
                            article['tags'] = [tag.strip() for tag in article['tags'].split(',') if tag.strip()]
                        else:
                            article['tags'] = []
                else:
                    article['tags'] = []
                
                # Tentar carregar dados de gera√ß√£o
                try:
                    if article['generation_data']:
                        article['generation_info'] = json.loads(article['generation_data'])
                except:
                    article['generation_info'] = {}
                
                logger.debug(f"üìÑ Artigo carregado: ID {article_id}")
                return article
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao carregar artigo {article_id}: {e}")
            return None
    
    def update_article(self, article_id: int, updates: Dict[str, Any], revisor: str = "Sistema") -> bool:
        """
        Atualiza dados do artigo
        
        Args:
            article_id: ID do artigo
            updates: Campos a atualizar
            revisor: Nome do revisor
            
        Returns:
            True se atualizado com sucesso
        """
        try:
            # Campos permitidos para atualiza√ß√£o
            allowed_fields = [
                'titulo', 'slug', 'meta_descricao', 'conteudo', 'tags',
                'comentario_revisor', 'status'
            ]
            
            # Filtrar apenas campos permitidos
            valid_updates = {k: v for k, v in updates.items() if k in allowed_fields}
            
            if not valid_updates:
                logger.warning(f"‚ö†Ô∏è Nenhum campo v√°lido para atualizar no artigo {article_id}")
                return False
            
            # Converter tags para JSON se necess√°rio
            if 'tags' in valid_updates:
                if isinstance(valid_updates['tags'], list):
                    valid_updates['tags'] = json.dumps(valid_updates['tags'])
            
            # Montar query din√¢mica
            set_clause = ", ".join([f"{field} = ?" for field in valid_updates.keys()])
            values = list(valid_updates.values())
            values.extend([datetime.now().strftime('%Y-%m-%d %H:%M:%S'), revisor, article_id])
            
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                query = f"""
                    UPDATE articles 
                    SET {set_clause}, data_revisao = ?, revisor_nome = ?
                    WHERE id = ?
                """
                
                cursor.execute(query, values)
                
                if cursor.rowcount == 0:
                    logger.warning(f"‚ö†Ô∏è Artigo n√£o encontrado para atualiza√ß√£o: ID {article_id}")
                    return False
                
                conn.commit()
                
                # REGISTRAR FEEDBACK NO SISTEMA DE APRENDIZADO (se status mudou)
                if 'status' in valid_updates:
                    try:
                        # Buscar dados do artigo atualizado
                        article = self.get_article(article_id)
                        if article:
                            new_status = valid_updates['status']
                            
                            # S√≥ registrar feedback para mudan√ßas de status significativas
                            if new_status in ['aprovado', 'rejeitado']:
                                product_category = self._extract_category_from_tipo(article.get('tipo_produto', 'produto_generico'))
                                product_brand = self._extract_brand_from_name(article.get('produto_nome', ''))
                                
                                # Calcular qualidade baseada no coment√°rio e dados do artigo
                                quality_score = self._calculate_article_quality(article, valid_updates.get('comentario_revisor', ''))
                                
                                # Determinar a√ß√£o
                                action = 'approved' if new_status == 'aprovado' else 'rejected'
                                
                                # Registrar feedback
                                self.priority_manager.record_feedback(
                                    product_name=article.get('produto_nome', ''),
                                    product_category=product_category,
                                    action=action,
                                    product_brand=product_brand,
                                    user_comments=valid_updates.get('comentario_revisor', ''),
                                    quality_score=quality_score
                                )
                                
                                logger.info(f"üß† Feedback registrado: {article.get('produto_nome', '')} ‚Üí {action} (Qualidade: {quality_score:.1f})")
                                
                    except Exception as e:
                        logger.error(f"‚ùå Erro ao registrar feedback: {e}")
                
                logger.info(f"‚úÖ Artigo atualizado: ID {article_id} por {revisor}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao atualizar artigo {article_id}: {e}")
            return False
    
    def approve_article(self, article_id: int, revisor: str = "Sistema", comentario: str = "", 
                       wp_category: str = None, produto_original: str = None, 
                       skip_availability_check: bool = False) -> bool:
        """
        Aprova artigo para publica√ß√£o
        
        Args:
            article_id: ID do artigo
            revisor: Nome do revisor
            comentario: Coment√°rio opcional
            wp_category: Categoria WordPress selecionada manualmente
            produto_original: Nome do produto original associado
            skip_availability_check: Pular verifica√ß√£o de disponibilidade
            
        Returns:
            True se aprovado com sucesso
        """
        # Verificar disponibilidade do produto antes de aprovar (se n√£o foi pulado)
        if not skip_availability_check:
            article = self.get_article(article_id)
            if article and article.get('generation_data'):
                try:
                    generation_data = json.loads(article['generation_data'])
                    produto_data = generation_data.get('produto', {})
                    
                    if produto_data.get('url'):
                        logger.info(f"üîç Verificando disponibilidade antes de aprovar artigo {article_id}")
                        availability_result = self.availability_checker.check_product_availability(produto_data)
                        
                        if not availability_result.get('disponivel', False):
                            motivo = availability_result.get('motivo', 'Motivo desconhecido')
                            logger.warning(f"‚ö†Ô∏è Produto indispon√≠vel, rejeitando artigo {article_id}: {motivo}")
                            
                            # Rejeitar automaticamente por indisponibilidade
                            return self.reject_article(
                                article_id, 
                                f"Produto indispon√≠vel: {motivo}", 
                                "Sistema de Verifica√ß√£o"
                            )
                        else:
                            logger.info(f"‚úÖ Produto dispon√≠vel, prosseguindo com aprova√ß√£o do artigo {article_id}")
                    else:
                        logger.info(f"‚ö†Ô∏è Artigo {article_id} n√£o possui URL do produto, pulando verifica√ß√£o de disponibilidade")
                            
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erro ao verificar disponibilidade para artigo {article_id}: {e}")
                    logger.debug(f"Generation data: {article.get('generation_data')}")
                    # Continuar com aprova√ß√£o mesmo com erro na verifica√ß√£o
            else:
                logger.info(f"‚ö†Ô∏è Artigo {article_id} n√£o possui dados de gera√ß√£o, pulando verifica√ß√£o de disponibilidade")
        
        updates = {
            'status': 'aprovado',
            'comentario_revisor': comentario
        }
        
        # Adicionar categoria WordPress se especificada
        if wp_category:
            updates['wp_category'] = wp_category
            
        # Adicionar produto original se especificado
        if produto_original:
            updates['produto_original'] = produto_original
        
        success = self.update_article(article_id, updates, revisor)
        
        if success:
            logger.info(f"‚úÖ Artigo aprovado: ID {article_id} por {revisor}")
            if wp_category:
                logger.info(f"üìÇ Categoria WP selecionada: {wp_category}")
            if produto_original:
                logger.info(f"üîó Produto associado: {produto_original}")
        
        return success
    
    def reject_article(self, article_id: int, motivo: str, revisor: str = "Sistema") -> bool:
        """
        Rejeita artigo e registra aprendizado automaticamente
        
        Args:
            article_id: ID do artigo
            motivo: Motivo da rejei√ß√£o
            revisor: Nome do revisor
            
        Returns:
            True se rejeitado com sucesso
        """
        updates = {
            'status': 'rejeitado',
            'comentario_revisor': motivo
        }
        
        success = self.update_article(article_id, updates, revisor)
        
        if success:
            logger.info(f"‚ùå Artigo rejeitado: ID {article_id} por {revisor} - {motivo}")
            
            # üß† REGISTRAR APRENDIZADO AUTOM√ÅTICO
            try:
                from src.intelligence.learning_manager import LearningManager
                learning_manager = LearningManager()
                
                learning_success = learning_manager.handle_article_rejection(
                    article_id=article_id,
                    rejection_reason=motivo,
                    reviewer=revisor
                )
                
                if learning_success:
                    logger.info(f"üß† Aprendizado registrado automaticamente para artigo {article_id}")
                else:
                    logger.warning(f"‚ö†Ô∏è Falha ao registrar aprendizado para artigo {article_id}")
                    
            except Exception as learning_error:
                logger.error(f"‚ùå Erro no sistema de aprendizado: {learning_error}")
                # N√£o falhar a rejei√ß√£o por erro no aprendizado
        
        return success
    
    def get_statistics(self) -> Dict[str, Any]:
        """
        Retorna estat√≠sticas do sistema de revis√£o
        
        Returns:
            Estat√≠sticas gerais
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # Contadores por status
                cursor.execute("""
                    SELECT status, COUNT(*) as count 
                    FROM articles 
                    GROUP BY status
                """)
                status_counts = {row[0]: row[1] for row in cursor.fetchall()}
                
                # Total geral
                cursor.execute("SELECT COUNT(*) FROM articles")
                total = cursor.fetchone()[0]
                
                # Artigos recentes (√∫ltimos 7 dias)
                cursor.execute("""
                    SELECT COUNT(*) FROM articles 
                    WHERE data_criacao >= datetime('now', '-7 days')
                """)
                recent = cursor.fetchone()[0]
                
                # Artigos por tipo de produto
                cursor.execute("""
                    SELECT tipo_produto, COUNT(*) as count 
                    FROM articles 
                    WHERE tipo_produto IS NOT NULL 
                    GROUP BY tipo_produto 
                    ORDER BY count DESC
                """)
                product_types = {row[0]: row[1] for row in cursor.fetchall()}
                
                stats = {
                    'total_artigos': total,
                    'pendentes': status_counts.get('pendente', 0),
                    'aprovados': status_counts.get('aprovado', 0),
                    'rejeitados': status_counts.get('rejeitado', 0),
                    'recentes_7_dias': recent,
                    'por_tipo_produto': product_types,
                    'status_counts': status_counts
                }
                
                logger.debug("üìä Estat√≠sticas de revis√£o calculadas")
                return stats
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao calcular estat√≠sticas: {e}")
            return {
                'total_artigos': 0,
                'pendentes': 0,
                'aprovados': 0,
                'rejeitados': 0,
                'recentes_7_dias': 0,
                'por_tipo_produto': {},
                'status_counts': {}
            }
    
    def get_approved_articles_for_publishing(self) -> List[Dict[str, Any]]:
        """
        Retorna artigos aprovados prontos para publica√ß√£o
        
        Returns:
            Lista de artigos aprovados
        """
        return self.list_articles(status='aprovado', limit=100)
    
    def mark_as_published(self, article_id: int, publish_url: str = None) -> bool:
        """
        Marca artigo como publicado
        
        Args:
            article_id: ID do artigo
            publish_url: URL onde foi publicado
            
        Returns:
            True se marcado com sucesso
        """
        updates = {
            'status': 'publicado'
        }
        
        if publish_url:
            updates['comentario_revisor'] = f"Publicado em: {publish_url}"
        
        success = self.update_article(article_id, updates, "Publisher")
        
        if success:
            logger.info(f"üöÄ Artigo marcado como publicado: ID {article_id}")
        
        return success
    
    def delete_article(self, article_id: int, revisor: str = "Sistema") -> bool:
        """
        Remove artigo do sistema
        
        Args:
            article_id: ID do artigo
            revisor: Nome do revisor
            
        Returns:
            True se removido com sucesso
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute("DELETE FROM articles WHERE id = ?", (article_id,))
                
                if cursor.rowcount == 0:
                    logger.warning(f"‚ö†Ô∏è Artigo n√£o encontrado para remo√ß√£o: ID {article_id}")
                    return False
                
                conn.commit()
                logger.info(f"üóëÔ∏è Artigo removido: ID {article_id} por {revisor}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao remover artigo {article_id}: {e}")
            return False
    
    def cleanup_old_articles(self, days: int = 90) -> int:
        """
        Remove artigos antigos do sistema
        
        Args:
            days: Artigos mais antigos que X dias
            
        Returns:
            N√∫mero de artigos removidos
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    DELETE FROM articles 
                    WHERE data_criacao < datetime('now', '-{} days')
                    AND status IN ('rejeitado', 'publicado')
                """.format(days))
                
                removed_count = cursor.rowcount
                conn.commit()
                
                logger.info(f"üßπ Limpeza conclu√≠da: {removed_count} artigos antigos removidos")
                return removed_count
                
        except Exception as e:
            logger.error(f"‚ùå Erro na limpeza de artigos antigos: {e}")
            return 0
    
    def _extract_category_from_tipo(self, tipo_produto: str) -> str:
        """Extrai categoria padr√£o do tipo de produto"""
        category_mapping = {
            'impressora': 'impressora',
            'multifuncional': 'multifuncional', 
            'toner': 'toner',
            'scanner': 'scanner',
            'papel': 'papel',
            'copiadora': 'copiadora',
            'suprimento': 'suprimento'
        }
        return category_mapping.get(tipo_produto.lower() if tipo_produto else 'produto_generico', 'produto_generico')
    
    def _extract_brand_from_name(self, product_name: str) -> str:
        """Extrai marca do nome do produto"""
        brands = ['HP', 'Canon', 'Brother', 'Epson', 'Samsung', 'Xerox', 'Ricoh', 'Lexmark']
        
        for brand in brands:
            if brand.lower() in product_name.lower():
                return brand
        
        return 'Gen√©rica'
    
    def _calculate_article_quality(self, article: Dict[str, Any], comentario: str) -> float:
        """Calcula qualidade do artigo baseado em crit√©rios"""
        quality_score = 5.0  # Base m√©dia
        
        try:
            # Fatores de qualidade
            titulo_len = len(article.get('titulo', ''))
            conteudo_len = len(article.get('conteudo', ''))
            meta_len = len(article.get('meta_descricao', ''))
            
            # T√≠tulo otimizado (30-60 chars)
            if 30 <= titulo_len <= 60:
                quality_score += 1.0
            elif titulo_len > 60:
                quality_score -= 0.5
            
            # Conte√∫do substantivo (>500 chars)
            if conteudo_len > 1500:
                quality_score += 1.5
            elif conteudo_len > 500:
                quality_score += 0.5
            else:
                quality_score -= 1.0
            
            # Meta description otimizada (120-155 chars)
            if 120 <= meta_len <= 155:
                quality_score += 1.0
            elif meta_len > 155:
                quality_score -= 0.5
            
            # Analisar coment√°rio do revisor
            if comentario:
                positive_words = ['bom', '√≥timo', 'excelente', 'aprovado', 'qualidade']
                negative_words = ['ruim', 'problema', 'erro', 'inadequado', 'falta']
                
                comentario_lower = comentario.lower()
                if any(word in comentario_lower for word in positive_words):
                    quality_score += 0.5
                elif any(word in comentario_lower for word in negative_words):
                    quality_score -= 1.0
            
            # Garantir range v√°lido (0-10)
            quality_score = max(0.0, min(10.0, quality_score))
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao calcular qualidade: {e}")
            quality_score = 5.0
        
        return quality_score

    def close(self):
        """Fecha recursos do review manager"""
        try:
            self.availability_checker.close()
            logger.debug("üîí Review Manager recursos fechados")
        except:
            pass
 
    def update_or_create_article(self, article_data: Dict[str, Any], force_update: bool = False) -> Tuple[int, bool]:
        """
        Atualiza artigo existente ou cria um novo se n√£o existir
        
        Args:
            article_data: Dados do artigo
            force_update: Se True, for√ßa atualiza√ß√£o mesmo se rejeitado
            
        Returns:
            Tupla (article_id, was_updated)
        """
        try:
            # Verificar se artigo j√° existe
            existing_id = self._get_existing_article_id(article_data)
            
            if existing_id:
                # Artigo existe - verificar se pode ser atualizado
                existing_article = self.get_article(existing_id)
                
                if existing_article:
                    status = existing_article.get('status', '')
                    
                    # S√≥ atualizar se n√£o estiver rejeitado ou se for for√ßado
                    if status != 'rejeitado' or force_update:
                        logger.info(f"üîÑ Atualizando artigo existente ID {existing_id}")
                        
                        # Preparar dados para atualiza√ß√£o
                        update_data = {
                            'titulo': article_data.get('titulo', ''),
                            'slug': article_data.get('slug', ''),
                            'meta_descricao': article_data.get('meta_descricao', ''),
                            'conteudo': article_data.get('conteudo', ''),
                            'tags': article_data.get('tags', [])
                        }
                        
                        # Atualizar artigo
                        if self.update_article(existing_id, update_data):
                            logger.info(f"‚úÖ Artigo ID {existing_id} atualizado com sucesso")
                            return existing_id, True
                        else:
                            logger.error(f"‚ùå Falha ao atualizar artigo ID {existing_id}")
                            raise Exception("Falha ao atualizar artigo existente")
                    else:
                        logger.warning(f"‚ö†Ô∏è Artigo ID {existing_id} foi rejeitado - use force_update=True para for√ßar atualiza√ß√£o")
                        raise ValueError(f"Artigo rejeitado (ID {existing_id}) - n√£o ser√° atualizado automaticamente")
            
            # Artigo n√£o existe - criar novo
            logger.info(f"üÜï Criando novo artigo: {article_data.get('titulo', 'Sem t√≠tulo')}")
            article_id = self.save_article_for_review(article_data, allow_duplicates=True)
            return article_id, False
            
        except Exception as e:
            logger.error(f"‚ùå Erro em update_or_create_article: {e}")
            raise
 
 
 
 