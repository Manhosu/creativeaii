"""
Availability Checker
M√≥dulo para verifica√ß√£o robusta de disponibilidade de produtos
"""

import requests
import time
from typing import Dict, List, Optional, Any
from bs4 import BeautifulSoup
from loguru import logger
import re
from urllib.parse import urlparse
import concurrent.futures
import threading

class AvailabilityChecker:
    """Verificador de disponibilidade de produtos"""
    
    def __init__(self, timeout: int = 8, max_retries: int = 1):
        """
        Inicializa o verificador de disponibilidade
        
        Args:
            timeout: Timeout para requests em segundos (reduzido para 8s)
            max_retries: N√∫mero m√°ximo de tentativas (reduzido para 1)
        """
        self.timeout = timeout
        self.max_retries = max_retries
        self.session = requests.Session()
        self.cache = {}  # Cache simples para URLs j√° verificadas
        
        # Headers simples (como no teste que funcionou)
        self.session.headers.update({
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'pt-BR,pt;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'DNT': '1',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        })
        
        logger.info("üîç Availability Checker inicializado")
    
    def check_product_availability(self, product: Dict[str, Any]) -> Dict[str, Any]:
        """
        Verifica disponibilidade detalhada de um produto
        
        Args:
            product: Dados do produto (deve conter 'url')
            
        Returns:
            Resultado da verifica√ß√£o com detalhes
        """
        url = product.get('url')
        nome = product.get('nome', 'Produto sem nome')
        
        if not url:
            return {
                'disponivel': False,
                'motivo': 'URL n√£o fornecida',
                'status_code': None,
                'detalhes': 'Produto sem URL para verifica√ß√£o'
            }
        
        # Verificar cache primeiro
        if url in self.cache:
            logger.debug(f"üíæ Cache hit para: {nome}")
            return self.cache[url]
        
        logger.debug(f"üîç Verificando disponibilidade: {nome}")
        
        try:
            # Verificar se URL √© acess√≠vel
            response = self._make_request(url)
            
            if response is None:
                return {
                    'disponivel': False,
                    'motivo': 'Erro de conex√£o',
                    'status_code': None,
                    'detalhes': 'N√£o foi poss√≠vel acessar a p√°gina do produto'
                }
            
            if response.status_code == 404:
                return {
                    'disponivel': False,
                    'motivo': 'Produto n√£o encontrado (404)',
                    'status_code': 404,
                    'detalhes': 'A p√°gina do produto n√£o existe mais'
                }
            
            if response.status_code >= 400:
                return {
                    'disponivel': False,
                    'motivo': f'Erro HTTP {response.status_code}',
                    'status_code': response.status_code,
                    'detalhes': 'Erro ao acessar p√°gina do produto'
                }
            
            # Analisar conte√∫do da p√°gina
            soup = BeautifulSoup(response.content, 'html.parser')
            availability_result = self._analyze_page_content(soup, url)
            availability_result['status_code'] = response.status_code
            
            # Adicionar ao cache
            self.cache[url] = availability_result
            
            return availability_result
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao verificar produto {nome}: {e}")
            return {
                'disponivel': False,
                'motivo': 'Erro de processamento',
                'status_code': None,
                'detalhes': str(e)
            }
    
    def check_products_batch(self, products: List[Dict[str, Any]], delay: float = 0.1, max_workers: int = 10, use_parallel: bool = True) -> List[Dict[str, Any]]:
        """
        Verifica disponibilidade de lista de produtos (com op√ß√£o de paralelismo)
        
        Args:
            products: Lista de produtos para verificar
            delay: Delay entre verifica√ß√µes em segundos (apenas para modo sequencial)
            max_workers: N√∫mero m√°ximo de threads para processamento paralelo
            use_parallel: Se True, usa processamento paralelo
            
        Returns:
            Lista de produtos com status de disponibilidade atualizado
        """
        logger.info(f"üîç Verificando disponibilidade de {len(products)} produtos {'(PARALELO)' if use_parallel else '(SEQUENCIAL)'}")
        
        if use_parallel and len(products) > 5:
            return self._check_products_parallel(products, max_workers)
        else:
            return self._check_products_sequential(products, delay)
    
    def _check_products_parallel(self, products: List[Dict[str, Any]], max_workers: int = 10) -> List[Dict[str, Any]]:
        """
        Verifica produtos em paralelo usando ThreadPoolExecutor
        """
        verified_products = []
        available_count = 0
        completed_count = 0
        lock = threading.Lock()
        
        def verify_single_product(product_with_index):
            nonlocal available_count, completed_count
            i, product = product_with_index
            
            try:
                # Verificar disponibilidade
                availability = self.check_product_availability(product)
                
                # Atualizar produto com resultado
                updated_product = product.copy()
                updated_product['disponivel'] = availability['disponivel']
                updated_product['verificacao_disponibilidade'] = availability
                
                with lock:
                    completed_count += 1
                    if availability['disponivel']:
                        available_count += 1
                        verified_products.append(updated_product)
                        logger.debug(f"‚úÖ [{completed_count}/{len(products)}] {product.get('nome', 'N/A')} - DISPON√çVEL")
                    else:
                        logger.info(f"‚ùå [{completed_count}/{len(products)}] {product.get('nome', 'N/A')} - INDISPON√çVEL: {availability['motivo']}")
                
                return updated_product if availability['disponivel'] else None
                
            except Exception as e:
                with lock:
                    completed_count += 1
                logger.error(f"‚ùå Erro ao verificar produto {i}: {e}")
                return None
        
        # Executar em paralelo
        start_time = time.time()
        with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
            # Submeter todas as tarefas
            futures = {executor.submit(verify_single_product, (i, product)): product 
                      for i, product in enumerate(products, 1)}
            
            # Aguardar conclus√£o
            concurrent.futures.as_completed(futures)
        
        end_time = time.time()
        duration = end_time - start_time
        success_rate = (available_count / len(products) * 100) if products else 0
        
        logger.info(f"‚úÖ Verifica√ß√£o PARALELA conclu√≠da em {duration:.1f}s: {available_count}/{len(products)} produtos dispon√≠veis ({success_rate:.1f}%)")
        
        return verified_products
    
    def _check_products_sequential(self, products: List[Dict[str, Any]], delay: float = 1.0) -> List[Dict[str, Any]]:
        """
        Verifica produtos sequencialmente (m√©todo original)
        """
        verified_products = []
        available_count = 0
        
        for i, product in enumerate(products, 1):
            try:
                # Verificar disponibilidade
                availability = self.check_product_availability(product)
                
                # Atualizar produto com resultado
                updated_product = product.copy()
                updated_product['disponivel'] = availability['disponivel']
                updated_product['verificacao_disponibilidade'] = availability
                
                if availability['disponivel']:
                    available_count += 1
                    verified_products.append(updated_product)
                    logger.debug(f"‚úÖ [{i}/{len(products)}] {product.get('nome', 'N/A')} - DISPON√çVEL")
                else:
                    logger.info(f"‚ùå [{i}/{len(products)}] {product.get('nome', 'N/A')} - INDISPON√çVEL: {availability['motivo']}")
                
                # Delay entre verifica√ß√µes
                if i < len(products):
                    time.sleep(delay)
                    
            except Exception as e:
                logger.error(f"‚ùå Erro ao verificar produto {i}: {e}")
                continue
        
        success_rate = (available_count / len(products) * 100) if products else 0
        logger.info(f"‚úÖ Verifica√ß√£o SEQUENCIAL conclu√≠da: {available_count}/{len(products)} produtos dispon√≠veis ({success_rate:.1f}%)")
        
        return verified_products
    
    def _make_request(self, url: str) -> Optional[requests.Response]:
        """
        Faz request com retry autom√°tico
        
        Args:
            url: URL para acessar
            
        Returns:
            Response object ou None se falhar
        """
        for attempt in range(1, self.max_retries + 1):
            try:
                # Usar requests simples como no teste que funcionou
                response = requests.get(url, timeout=self.timeout)
                return response
                
            except requests.exceptions.Timeout:
                logger.warning(f"‚è±Ô∏è Timeout na tentativa {attempt}/{self.max_retries} para {url}")
                if attempt < self.max_retries:
                    time.sleep(2 * attempt)  # Backoff exponencial
                    
            except requests.exceptions.ConnectionError:
                logger.warning(f"üîå Erro de conex√£o na tentativa {attempt}/{self.max_retries} para {url}")
                if attempt < self.max_retries:
                    time.sleep(2 * attempt)
                    
            except Exception as e:
                logger.error(f"‚ùå Erro inesperado na tentativa {attempt}/{self.max_retries}: {e}")
                break
        
        return None
    
    def _analyze_page_content(self, soup: BeautifulSoup, url: str) -> Dict[str, Any]:
        """
        Analisa conte√∫do da p√°gina para determinar disponibilidade
        
        Args:
            soup: BeautifulSoup da p√°gina
            url: URL da p√°gina
            
        Returns:
            Resultado da an√°lise
        """
        try:
            page_text = soup.get_text().lower()
            
            # Verificar indicadores de indisponibilidade
            unavailable_indicators = [
                'produto indispon√≠vel',
                'fora de estoque',
                'esgotado',
                'sem estoque',
                'produto esgotado',
                'temporariamente indispon√≠vel',
                'produto n√£o dispon√≠vel',
                'out of stock',
                'not available',
                'unavailable'
            ]
            
            for indicator in unavailable_indicators:
                if indicator in page_text:
                    return {
                        'disponivel': False,
                        'motivo': f'Indicador encontrado: "{indicator}"',
                        'detalhes': 'P√°gina indica que produto est√° indispon√≠vel'
                    }
            
            # Verificar se a p√°gina √© do Creative C√≥pias
            if 'creativecopias' not in page_text and 'creative' not in page_text:
                return {
                    'disponivel': False,
                    'motivo': 'P√°gina n√£o pertence ao site Creative C√≥pias',
                    'detalhes': 'URL pode ter sido redirecionada ou alterada'
                }
            
            # Verificar presen√ßa de elementos que indicam produto ativo
            positive_indicators = [
                # Bot√µes de compra
                soup.find(['button', 'a'], text=re.compile(r'comprar|adicionar.*carrinho|buy now', re.I)),
                # Pre√ßos
                soup.find(['span', 'div'], class_=re.compile(r'price|preco|valor', re.I)),
                # Campos de quantidade
                soup.find('input', {'type': 'number', 'name': re.compile(r'qty|quantity|quantidade', re.I)}),
                # Formul√°rios de compra
                soup.find('form', action=re.compile(r'cart|carrinho|checkout', re.I))
            ]
            
            active_indicators = sum(1 for indicator in positive_indicators if indicator)
            
            if active_indicators >= 2:
                return {
                    'disponivel': True,
                    'motivo': f'{active_indicators} indicadores positivos encontrados',
                    'detalhes': 'P√°gina cont√©m elementos que indicam produto ativo'
                }
            elif active_indicators == 1:
                return {
                    'disponivel': True,
                    'motivo': 'Indicador positivo encontrado',
                    'detalhes': 'Produto parece estar dispon√≠vel mas verifica√ß√£o limitada'
                }
            else:
                # Verificar se pelo menos tem estrutura b√°sica de produto
                has_product_structure = any([
                    soup.find(['h1', 'h2', 'h3'], text=re.compile(r'.{10,}', re.I)),  # T√≠tulo do produto
                    soup.find('img', src=re.compile(r'product|produto', re.I)),  # Imagem do produto
                    'c√≥digo' in page_text or 'sku' in page_text  # C√≥digo do produto
                ])
                
                if has_product_structure:
                    return {
                        'disponivel': True,
                        'motivo': 'Estrutura de produto detectada',
                        'detalhes': 'N√£o h√° indicadores claros de indisponibilidade'
                    }
                else:
                    return {
                        'disponivel': False,
                        'motivo': 'P√°gina n√£o parece ser de produto',
                        'detalhes': 'N√£o foram encontrados elementos t√≠picos de p√°gina de produto'
                    }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao analisar conte√∫do da p√°gina: {e}")
            return {
                'disponivel': False,
                'motivo': 'Erro na an√°lise da p√°gina',
                'detalhes': str(e)
            }
    
    def get_statistics(self, verification_results: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        Gera estat√≠sticas das verifica√ß√µes realizadas
        
        Args:
            verification_results: Lista de resultados de verifica√ß√£o
            
        Returns:
            Estat√≠sticas detalhadas
        """
        if not verification_results:
            return {'total': 0}
        
        total = len(verification_results)
        available = sum(1 for r in verification_results if r.get('verificacao_disponibilidade', {}).get('disponivel', False))
        
        # Contar motivos de indisponibilidade
        motivos = {}
        for result in verification_results:
            verif = result.get('verificacao_disponibilidade', {})
            if not verif.get('disponivel', True):
                motivo = verif.get('motivo', 'Motivo n√£o especificado')
                motivos[motivo] = motivos.get(motivo, 0) + 1
        
        return {
            'total_verificados': total,
            'disponiveis': available,
            'indisponiveis': total - available,
            'taxa_disponibilidade': (available / total * 100) if total > 0 else 0,
            'motivos_indisponibilidade': motivos
        }
    
    def close(self):
        """Fecha sess√£o HTTP"""
        try:
            self.session.close()
            logger.debug("üîí Sess√£o HTTP fechada")
        except:
            pass